---
layout: post
title:  内存对齐的一点理解
date:   2015-03-31 16:39:39
category: "学习"
---

前段时间在做面试题的时候碰到这样的一个题目，根据我的大概印象应该是这个样子的
```c++
#pragma pack(pop)
struct A{
	char a;
	int b;
	float c;
	double d;
	double *aa;
	char * dd;
	short e;
};
```

然后询问sizeof(A)是多少？下面给出了几个选项

A 36

B 40 

C 48

D 56

当我看到前面部分的时候兴高采烈（因为其他题目都不会），然后看到选项的时候发现没有为毛没有答案呢，然后就悲剧了

其实我当时看的还不懂那个#pragma pack(pop)是什么东西，然后sizeof(A)我也觉得是所有的元素sizeof加起来的和，然后又悲剧了

其实真正的情况不是这样的。这个要考虑多种因素，其实最终的目标还是要提高效率，也就是让CPU快速访问，然后编译器就这里面做了手脚了。

为了较快的访问，编译的时候编译器会根据变量的对齐方式进行对齐，对齐的规则有以下几条（来自百度百科点击打开链接）：


编译器中提供了#pragma pack(n)来设定变量以n字节对齐方式。n字节对齐就是说变量存放的起始地址的偏移量有两种情况：

第一、如果n大于等于该变量所占用的字节数，那么偏移量必须满足默认的对齐方式；（取较小的那个）

第二、如果n小于该变量的类型所占用的字节数，那么偏移量为n的倍数，不用满足默认的对齐方式。（取较小的那个，以下记这个取得的较小数是min）

结构的总大小也有个约束条件，分下面两种情况：

如果n大于所有成员变量类型所占用的字节数，那么结构的总大小必须为占用空间最大的变量占用的空间数的倍数；

否则必须为n的倍数。

ps：
#pragma pack(push) //保存对齐状态<br/>
#pragma pack(4)//设定为4字节对齐<br/>
#pragma pack(pop)//恢复对齐状态


这个时候我们再来看上面的代码

根据推测这里的n应该是8，不然我的电脑输出应该是32（我是64位电脑）,这里假设结构体首位地址是0，[0,1)代表在0位置这个地方的一个字节

char a;          8>sizeof(a)==1,那么取min=1，且0%min==0，则a存放在的 [0,1) 内存中，其前面不需要填充字节

int b;             8>sizeof(b)==4,那么取min=4，且4%min==0，则b存放在 [4,8)  的内存中，其前面填充了三个空字节

float c;          8>sizeof(c)==4,那么取min=4，,且8%min==0，则c存放在 [8,12) 的内存中，其前面不需要填充字节

double d;     8==sizeof(d),    那么取min=8，且16%min==0，则d存放在[16,24)的内存中，其前面填充了三个字节

double *aa; 8>sizeof(aa),    那么取min=4，且24%min==0，则aa存放在[24,28)的内存中，其前面不需要填充字节

char *dd;     8>sizeof(dd)，那么取min=4，且28%min==0，则dd存放在[28,32)的内存冲，其前面不需要填充字节

short e;        8>sizeof(e)==2, 那么取min=2,，且32%min==0，则e存放在[32,34)的内存中，其前面不需要填充字节

到了这里总共占据了34个字节，那么为什么是40，那就是因为结构体总大小的约束了

n==8==sizeof(double)，所以总大小必须是8的倍数，那么最后面补齐6个字节，就是40了


另外如果代码如下

```c++
#pragma pack(4)  
struct A{  
    char a;  
    int b;  
    float c;  
    double d;  
    double *aa;  
    char * dd;  
    short e;  
};
``` 

那么，sizeof(A)==32，也是根据前面的规则，注意#pragma pack(4)

再看一下这个

```c++
struct A  
{  
    int a:1;  
    int d:4;  
    char b:1;  
    int c:3;  

};
```

sizeof(A)等于多少呢？

答案是12

这里的位域其实就是相邻相同的合并成一个变量，然后新的变量的大小是原来类型大小的整数倍，不够的话向上取整

上述就成了“4个字节的变量，1个自己的变量，4个字节的变量”然后按照上面的对齐规则就可以了


如果道友发现我的错误，欢迎指出来，因为上面很多的东西都是我YY的
